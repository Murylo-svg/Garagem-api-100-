// server.js

// --- 1. IMPORTA√á√ïES ---
import express from 'express';
import dotenv from 'dotenv';
import axios from 'axios';
import path from 'path';
import { fileURLToPath } from 'url';
// --- NOVO: Importa√ß√µes do MongoDB ---
import { MongoClient, ObjectId } from 'mongodb'; // ObjectId √© crucial para buscar por ID

// __filename e __dirname em ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carrega vari√°veis de ambiente do arquivo .env
dotenv.config();

// --- 2. CONFIGURA√á√ïES INICIAIS ---
const app = express();
const port = process.env.PORT || 3001;
const apiKey = process.env.OPENWEATHER_API_KEY;
// --- NOVO: Pega a URI de conex√£o do MongoDB do arquivo .env ---
const mongoUri = process.env.MONGO_URI;

// --- NOVO: Vari√°veis para guardar a conex√£o com o banco e as cole√ß√µes ---
let db;
let produtosCollection, usuariosCollection, pedidosCollection, chamadosCollection;

// Middleware para CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    next();
});

// Middleware para parsear JSON
app.use(express.json());

// --- 3. FUN√á√ÉO PRINCIPAL PARA INICIAR O SERVIDOR ---
async function startServer() {
    if (!mongoUri) {
        console.error('ERRO FATAL: A vari√°vel de ambiente MONGO_URI n√£o est√° definida no arquivo .env');
        process.exit(1); // Encerra o processo se n√£o houver URI do banco
    }

    try {
        // --- Conex√£o com o MongoDB ---
        const client = new MongoClient(mongoUri);
        await client.connect();
        console.log('‚úÖ Conectado com sucesso ao MongoDB!');

        // Seleciona o banco de dados (troque 'garagem_inteligente_db' pelo nome do seu banco)
        db = client.db('garagem_inteligente_db');

        // Pega as cole√ß√µes que vamos usar
        produtosCollection = db.collection('produtos');
        usuariosCollection = db.collection('usuarios');
        pedidosCollection = db.collection('pedidos');
        chamadosCollection = db.collection('chamadosSuporte');

        // Inicia o servidor Express AP√ìS a conex√£o com o banco ter sido estabelecida
        app.listen(port, () => {
            console.log(`üöÄ Servidor backend rodando em http://localhost:${port}`);
            if (!apiKey) {
                console.warn('ATEN√á√ÉO: A vari√°vel de ambiente OPENWEATHER_API_KEY n√£o foi encontrada.');
            } else {
                console.log('Chave da API OpenWeatherMap carregada com sucesso.');
            }
        });

    } catch (error) {
        console.error('‚ùå Falha ao conectar ao MongoDB ou iniciar o servidor:', error);
        process.exit(1);
    }
}


// ----- OS DADOS FALSOS (MOCK DATA) FORAM REMOVIDOS DAQUI -----
// Agora os dados vir√£o diretamente do MongoDB


// ----- ENDPOINTS DA API OPENWEATHERMAP (permanecem iguais) -----
// ... (seu c√≥digo de previs√£o, tempoatual e geocoding continua aqui, sem altera√ß√µes)
app.get('/api/previsao/:cidade', async (req, res) => {
    // seu c√≥digo aqui...
});

app.get('/api/tempoatual/:cidade', async (req, res) => {
    // seu c√≥digo aqui...
});

app.get('/api/geocoding/:query', async (req, res) => {
    // seu c√≥digo aqui...
});


// ----- ENDPOINTS DA APLICA√á√ÉO (AGORA USANDO MONGODB) -----

// ENDPOINT 1: Retornar todos os produtos
app.get('/api/produtos', async (req, res) => {
  console.log('[Servidor] Requisi√ß√£o recebida em /api/produtos');
  try {
    const produtos = await produtosCollection.find({}).toArray();
    res.json(produtos);
  } catch (error) {
    res.status(500).json({ mensagem: 'Erro ao buscar produtos no banco de dados.' });
  }
});

// ENDPOINT 2: Retornar um produto espec√≠fico pelo ID
app.get('/api/produtos/:id', async (req, res) => {
  const { id } = req.params;
  console.log(`[Servidor] Buscando produto com ID: ${id}`);
  
  // Valida√ß√£o para evitar que um ID inv√°lido quebre o servidor
  if (!ObjectId.isValid(id)) {
    return res.status(400).json({ mensagem: 'Formato de ID inv√°lido.' });
  }
  
  try {
    const produtoEncontrado = await produtosCollection.findOne({ _id: new ObjectId(id) });
    if (produtoEncontrado) {
      res.json(produtoEncontrado);
    } else {
      res.status(404).json({ mensagem: 'Produto n√£o encontrado!' });
    }
  } catch (error) {
    res.status(500).json({ mensagem: 'Erro ao buscar produto no banco de dados.' });
  }
});

// ENDPOINT 3: Retornar todos os usu√°rios
app.get('/api/usuarios', async (req, res) => {
  console.log('[Servidor] Requisi√ß√£o recebida em /api/usuarios');
  try {
    const usuarios = await usuariosCollection.find({}).toArray();
    res.json(usuarios);
  } catch (error) {
    res.status(500).json({ mensagem: 'Erro ao buscar usu√°rios.' });
  }
});

// ENDPOINT 4: Retornar todos os pedidos
app.get('/api/pedidos', async (req, res) => {
    console.log('[Servidor] Requisi√ß√£o recebida em /api/pedidos');
    try {
        const pedidos = await pedidosCollection.find({}).toArray();
        res.json(pedidos);
    } catch (error) {
        res.status(500).json({ mensagem: 'Erro ao buscar pedidos.' });
    }
});

// ENDPOINT 5: Retornar os pedidos de um usu√°rio espec√≠fico
app.get('/api/usuarios/:id/pedidos', async (req, res) => {
    const usuarioId = parseInt(req.params.id); // Mantendo o ID num√©rico como no seu exemplo
    console.log(`[Servidor] Buscando pedidos para o usu√°rio ID: ${usuarioId}`);

    if (isNaN(usuarioId)) {
        return res.status(400).json({ mensagem: 'ID de usu√°rio deve ser um n√∫mero.' });
    }

    try {
        // Aqui buscamos na cole√ß√£o de pedidos por um campo 'usuarioId' que corresponda
        const pedidosDoUsuario = await pedidosCollection.find({ usuarioId: usuarioId }).toArray();
        res.json(pedidosDoUsuario); // Retorna array vazio se n√£o encontrar, o que √© correto
    } catch (error) {
        res.status(500).json({ mensagem: 'Erro ao buscar pedidos do usu√°rio.' });
    }
});

// ENDPOINT 6: Retornar todos os chamados de suporte
app.get('/api/chamados', async (req, res) => {
    console.log('[Servidor] Requisi√ß√£o recebida em /api/chamados');
    try {
        const chamados = await chamadosCollection.find({}).toArray();
        res.json(chamados);
    } catch (error) {
        res.status(500).json({ mensagem: 'Erro ao buscar chamados de suporte.' });
    }
});


// Rota raiz apenas para teste
app.get('/', (req, res) => {
    res.send('Servidor Backend da Garagem Inteligente est√° no ar e conectado ao MongoDB!');
});

// --- Inicia todo o processo ---
startServer();